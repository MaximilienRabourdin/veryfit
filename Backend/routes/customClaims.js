const express = require("express");
const router = express.Router();
const admin = require("firebase-admin");

const db = admin.firestore(); // ‚úÖ n√©cessaire pour √©crire dans Firestore



router.get("/ping", (req, res) => {
  res.json({ message: "üü¢ Custom claims route OK" });
});


router.post("/setCustomClaims", async (req, res) => {
  const { uid, role, isApproved } = req.body;

  console.log("üì© Requ√™te re√ßue pour setCustomClaims :", { uid, role, isApproved });

  if (!uid || !role) {
    return res.status(400).json({ error: "uid et role sont requis" });
  }

  try {
    const normalizedRole = role.toLowerCase();
    console.log("‚û°Ô∏è D√©finition des claims pour", uid, "avec r√¥le", role);



    // ‚úÖ 1. D√©finir les custom claims Firebase
    await admin.auth().setCustomUserClaims(uid, {
      role: normalizedRole,
      isApproved: isApproved === true,
    });
    console.log("‚úÖ Custom claims d√©finis :", normalizedRole);

    // ‚úÖ 2. Mise √† jour Firestore avec set + merge
    await db.collection("users_webapp").doc(uid).set(
      {
        role: normalizedRole,
        isApproved: true,
      },
      { merge: true }
    );
    console.log("‚úÖ Firestore mis √† jour avec r√¥le");

    return res.status(200).json({ message: "Custom claims mis √† jour avec succ√®s." });
  } catch (error) {
    console.error("‚ùå Erreur setCustomClaims :", error);
    return res
      .status(500)
      .json({ error: "Erreur serveur lors de la d√©finition des custom claims." });
  }
});

module.exports = router;
