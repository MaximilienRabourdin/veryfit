const cron = require('node-cron');
const NotificationService = require('../services/notificationService');

/**
 * Scheduler pour les contr√¥les p√©riodiques
 * V√©rifie quotidiennement les dossiers qui atteignent 6 mois
 */

console.log("üîÑ Initialisation du scheduler de contr√¥les p√©riodiques...");

// V√©rifier tous les jours √† 9h00 (heure serveur)
cron.schedule('0 9 * * *', async () => {
  console.log('üîî [CRON] D√©marrage v√©rification contr√¥les p√©riodiques - ' + new Date().toISOString());
  
  try {
    // Traiter les notifications dues
    const mainResult = await NotificationService.processScheduledNotifications();
    console.log(`‚úÖ [CRON] Notifications principales: ${mainResult.processed} envoy√©es, ${mainResult.errors} erreurs`);
    
    // Traiter les retry des t√¢ches √©chou√©es
    const retryResult = await NotificationService.processFailedTasks();
    console.log(`üîÑ [CRON] Retry: ${retryResult.retried} t√¢ches reprises`);
    
    // Nettoyer les anciennes t√¢ches (1 fois par semaine le lundi)
    const today = new Date().getDay(); // 1 = Lundi
    if (today === 1) {
      const cleanupResult = await NotificationService.cleanupOldTasks();
      console.log(`üßπ [CRON] Nettoyage: ${cleanupResult.cleaned} anciennes t√¢ches supprim√©es`);
    }
    
    // Afficher les stats
    const stats = await NotificationService.getNotificationStats();
    console.log(`üìä [CRON] Stats: ${stats.pending} en attente, ${stats.completed} termin√©es, ${stats.error} en erreur, ${stats.overdue} en retard`);
    
    console.log('‚úÖ [CRON] Traitement des contr√¥les p√©riodiques termin√© avec succ√®s');
    
  } catch (error) {
    console.error('‚ùå [CRON] Erreur lors du traitement des contr√¥les p√©riodiques:', error);
    
    // Envoyer un email d'alerte √† l'√©quipe technique (optionnel)
    try {
      const { sendEmailToFit } = require('../utils/email');
      await sendEmailToFit({
        subject: '[ALERTE] Erreur syst√®me - Contr√¥les p√©riodiques',
        html: `
          <h2>üö® Erreur syst√®me d√©tect√©e</h2>
          <p>Une erreur s'est produite lors du traitement automatique des contr√¥les p√©riodiques :</p>
          <pre style="background-color: #f8f9fa; padding: 10px; border-radius: 5px;">${error.message}</pre>
          <p><strong>Date :</strong> ${new Date().toISOString()}</p>
          <p>Veuillez v√©rifier les logs du serveur.</p>
        `
      });
    } catch (emailError) {
      console.error('‚ùå [CRON] Impossible d\'envoyer l\'email d\'alerte:', emailError);
    }
  }
});

// V√©rification au d√©marrage (pour test)
cron.schedule('*/5 * * * *', async () => {
  // Toutes les 5 minutes en d√©veloppement seulement
  if (process.env.NODE_ENV === 'development') {
    console.log('üîç [DEV] V√©rification test toutes les 5 minutes...');
    
    try {
      const stats = await NotificationService.getNotificationStats();
      if (stats.overdue > 0) {
        console.log(`‚ö†Ô∏è [DEV] ${stats.overdue} notifications en retard d√©tect√©es`);
      }
    } catch (error) {
      console.error('‚ùå [DEV] Erreur v√©rification:', error);
    }
  }
});

// Endpoint manuel pour debug (√† utiliser via API)
const processNow = async () => {
  console.log('üîÑ [MANUAL] Traitement manuel des contr√¥les p√©riodiques...');
  
  try {
    const result = await NotificationService.processScheduledNotifications();
    console.log(`‚úÖ [MANUAL] ${result.processed} notifications envoy√©es, ${result.errors} erreurs`);
    return result;
  } catch (error) {
    console.error('‚ùå [MANUAL] Erreur traitement manuel:', error);
    throw error;
  }
};

module.exports = {
  processNow
};